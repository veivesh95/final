package com.perisic.beds;

import javax.swing.*;

/**
 * This class represents the overall system.
 */

public class DepositItemReceiver {
	ReceiptBasis theReceiptBasis = null;
	static int sum_weight = 0;
	static int itemCount = 0;

	PrinterInterface printer = null;

	/**
	 * The deposit item receiver is constructed with the output device (i.e. the
	 * printer)
	 * 
	 * @param printer
	 */
	public DepositItemReceiver(PrinterInterface printer) {
		super();
		this.printer = printer;
	}

	/**
	 * 
	 */
	public void createReceiptBasis() {
		theReceiptBasis = new ReceiptBasis();
	}

	/**
	 * @param slot
	 *            for object from DepositItem class
	 */
	public void classifyItem(int slot) {
		DepositItem item = null;
		if (slot == 1) {
			item = new Can();
			sum_weight = sum_weight + Can.weight;
		} else if (slot == 2) {
			item = new Crate();
			sum_weight = sum_weight + Crate.weight;
		} else if (slot == 3) {
			item = new Paperbag();
			sum_weight = sum_weight + Paperbag.weight;
		} else if (slot == 4) {
			item = new Glass_Bottle();
			sum_weight = sum_weight + Glass_Bottle.weight;
		} else if (slot == 5) {
			item = new Plastic_Bottle();
			sum_weight = sum_weight + Plastic_Bottle.weight;
		} /*
			 * else if ( slot == 4 ){ item = new Bottle(); }
			 */

		if (theReceiptBasis == null) {
			createReceiptBasis();
		}

		if (checkAvailability(sum_weight)) {
			theReceiptBasis.addItem(item);
			itemCount += 1;
			JOptionPane.showMessageDialog(null, "Successfully added");
		} else
			JOptionPane.showMessageDialog(null, "Machine is full :(");

	}

	/**
	 * Console output of receipt
	 */
	public void printReceipt() {
		String str = theReceiptBasis.computeSum();
		printer.print(str);
		theReceiptBasis = null;
	}

	/**
	 * Same as printReceipt() but has a return of String
	 * 
	 * @return is string format of receipt which is generated by inputs given
	 *         manually
	 */
	public String stringReceipt() {
		String bill = theReceiptBasis.computeSum();
		theReceiptBasis = null;
		return bill;
	}

	/**
	 * Clearing the cart
	 */
	public void clear() {
		if (theReceiptBasis == null) {
			createReceiptBasis();
		}
		theReceiptBasis.clear();
		theReceiptBasis = null;
//		itemCount = 0;
	}

	/**
	 * This boolean method get the weight and check with the max weight so 
	 * any new item can be added or not
	 * @param weight of an item passed in the system
	 * @return if its true that means machine has some space left
	 */
	public boolean checkAvailability(int weight) {
		if (weight < 1500) {
			RecyclingGUI.progressBar.setValue(sum_weight);
			return true;
		} else {
			return false;
		}
	}

	/**
	 * gets the total count of the items and passes it
	 * to server side application to display
	 * @return
	 */
	public int getNumberOfItems() {
		return itemCount;
	}

	/**
	 * to reset the application 
	 */
	public void resetReceiptBasis() {
		theReceiptBasis = null;
	}

}
